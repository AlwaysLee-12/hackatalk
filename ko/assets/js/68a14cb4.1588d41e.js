(self.webpackChunkhackatalk_website=self.webpackChunkhackatalk_website||[]).push([[5609],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return n?r.createElement(k,i(i({ref:t},m),{},{components:n})):r.createElement(k,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3919:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}n.d(t,{b:function(){return r},Z:function(){return a}})},4996:function(e,t,n){"use strict";n.d(t,{C:function(){return o},Z:function(){return i}});var r=n(2263),a=n(3919);function o(){var e=(0,r.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,r){var o=void 0===r?{}:r,i=o.forcePrependBaseUrl,l=void 0!==i&&i,s=o.absolute,p=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,a.b)(n))return n;if(l)return t+n;var m=n.startsWith(t)?n:t+n.replace(/^\//,"");return p?e+m:m}(o,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},864:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=(n(4996),{id:"installation",title:"\uc124\uce58",sidebar_label:"\uc124\uce58"}),l=void 0,s={unversionedId:"server/installation",id:"server/installation",isDocsHomePage:!1,title:"\uc124\uce58",description:"Server project belongs to seperate directory server, in github.",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/server/installation.md",sourceDirName:"server",slug:"/server/installation",permalink:"/ko/docs/server/installation",editUrl:"https://github.com/dooboolab/hackatalk/tree/master/website/docs/server/installation.md",version:"current",frontMatter:{id:"installation",title:"\uc124\uce58",sidebar_label:"\uc124\uce58"},sidebar:"docs",previous:{title:"\uac1c\uc694",permalink:"/ko/docs/server/overview"},next:{title:"\ucc44\ub110",permalink:"/ko/docs/server/channel"}},p=[{value:"Local installation",id:"local-installation",children:[]}],m={toc:p};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Server project belongs to seperate directory ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dooboolab/hackatalk/tree/master/server"},"server"),", in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dooboolab/hackatalk"},"github"),"."),(0,o.kt)("p",null,"We are using ",(0,o.kt)("a",{parentName:"p",href:"https://www.prisma.io"},"Prisma")," and ",(0,o.kt)("a",{parentName:"p",href:"https://nexus.js.org/docs/nexus-prisma"},"Nexus")," to serve our resolvers to clients."),(0,o.kt)("h3",{id:"local-installation"},"Local installation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install your packages in ",(0,o.kt)("inlineCode",{parentName:"p"},"server")," directory."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"yarn\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Note that we recommend using yarn because all of our team members do."),(0,o.kt)("li",{parentName:"ul"},"Also note that ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn.lock")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"package-lock.json")," sometimes make collision. Try to delete one of them."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure ",(0,o.kt)("a",{parentName:"p",href:"https://www.google.com/search?q=postgresql&rlz=1C5CHFA_enKR865KR867&oq=postgresql&aqs=chrome.0.69i59j35i39j0l3j69i60j69i61l2.3220j0j7&sourceid=chrome&ie=UTF-8"},"postgresql")," database. Although ",(0,o.kt)("a",{parentName:"p",href:"https://prisma.io"},"Prisma")," works on many other databases, we recommend using ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," since we are using this in our live server. Also ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," is the primarily supported database in ",(0,o.kt)("inlineCode",{parentName:"p"},"Prisma"),"."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Sample installation for Ubuntu user",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt install postgresql\nsudo -u postgres psql\nalter user postgres with password 'your_password';\n"))),(0,o.kt)("li",{parentName:"ul"},"Sample installation for Mac user",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"~ brew services start postgresql\n~ createuser --interactive --pwprompt\nEnter name of role to add: postgres\nEnter password for new role: \nEnter it again: \nShall the new role be a superuser? (y/n) y\n"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Setup environment"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Setup your own local ",(0,o.kt)("inlineCode",{parentName:"li"},"environment")," in your machine.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Copy ",(0,o.kt)("inlineCode",{parentName:"li"},"dotenv/test.env")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"dotenv/.env"),".",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"cp dotenv/test.env dotenv/.env\n"))),(0,o.kt)("li",{parentName:"ul"},"Include ",(0,o.kt)("inlineCode",{parentName:"li"},"DATABASE_URL")," (* necessary field)",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'DATABASE_URL="postgresql://<user>:<password>!@<url>:5432/<database>?schema=<scheme>"\n')),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"Note that you should change appropriate values in ",(0,o.kt)("inlineCode",{parentName:"p"},"user"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"password"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"database"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"scheme")," fields. Or you can even use other databases. More about ",(0,o.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/database-connectors/connection-urls"},"connection urls")))),(0,o.kt)("li",{parentName:"ul"},"Then run ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn start")," to start server with your local environment."))),(0,o.kt)("li",{parentName:"ol"},"Include ",(0,o.kt)("inlineCode",{parentName:"li"},"test")," environment locally to test queries in your database. This should be included when writing a test code.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ psql postgres\npostgres=> CREATE DATABASE postgres;\n// Connect Inside `postgres` database to create `test` schema.\npostgres=> \\connect postgres\ntest=> CREATE SCHEMA test;\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Above should match ",(0,o.kt)("inlineCode",{parentName:"li"},"test.env"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'DATABASE_URL="postgresql://postgres:dooboolab0!@localhost:5432/postgres?schema=test"\n'))))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Sync your local database with ",(0,o.kt)("inlineCode",{parentName:"p"},"Prisma"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn migrate:deploy\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Above command will follow ",(0,o.kt)("inlineCode",{parentName:"li"},"dotenv/.env")," environment."),(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"Prisma")," script does not create your ",(0,o.kt)("inlineCode",{parentName:"li"},"database")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"schema")," automatically, create them manually then try again."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Generate Prisma Client and Nexus"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"yarn generate\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Migration (Usually during development)"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Change models in ",(0,o.kt)("inlineCode",{parentName:"li"},"./prisma/schema.prisma"),"."),(0,o.kt)("li",{parentName:"ol"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"migration:dev")," to see if migration does not fail in your database.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"yarn migrate:dev\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This ",(0,o.kt)("a",{parentName:"li",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-migrate#prisma-migrate"},"migration process")," generates below file.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"migrations/\n\u2514\u2500 20200724010758-migration_name/\n   \u2514\u2500 migration.sql\n"))))),(0,o.kt)("li",{parentName:"ol"},"Running ",(0,o.kt)("inlineCode",{parentName:"li"},"migration:deploy")," will finish migrating your database.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"yarn migrate:deploy\n")))))))}c.isMDXComponent=!0}}]);